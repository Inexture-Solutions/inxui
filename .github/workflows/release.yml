name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Build and Release
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_INX_UI_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      GITHUB_TOKEN: ${{ secrets.ORG_INX_UI_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_INX_UI_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.ORG_INX_UI_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Cache Turbo Build
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Configure NPM Authentication
        run: npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_INX_UI_TOKEN }}

      - name: Build Changed Packages
        run: pnpm turbo run build --filter=...[HEAD^1]

      - name: Check for Changes
        id: changes_check
        run: |
          git fetch origin main
          git diff --quiet origin/main HEAD || echo "Changes detected."
        continue-on-error: true

      - name: Skip if No Changes
        if: ${{ failure() }}
        run: echo "No changes detected, skipping release creation."

      - name: Run Release Script
        if: ${{ success() }}
        run: pnpm run release
        env:
          NPM_TOKEN: ${{ secrets.NPM_INX_UI_TOKEN }}

      - name: Create GitHub Release
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');

            // Get the short commit SHA to use in the tag
            const commitSha = execSync('git rev-parse --short HEAD', { encoding: 'utf8' }).trim();

            // Generate the tag using the commit SHA
            const latestTag = `v${commitSha}`;

            // Extract package versions
            const workspaceInfo = JSON.parse(execSync('pnpm list --json', { encoding: 'utf8' }));
            const packagesList = workspaceInfo.map(pkg => `- **${pkg.name}**: ${pkg.version}`).join('\n');

            // Generate release notes
            const releaseNotes = `### Packages Released\n\n${packagesList}`;

            // Create GitHub release
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: latestTag,
              name: `Release ${latestTag}`,
              body: releaseNotes,
              draft: false,
              prerelease: false,
            });

            console.log(`Created GitHub release with tag: ${latestTag}`);

            // Create release.json
            const releaseData = {
              packages: workspaceInfo.map(pkg => ({
                name: pkg.name,
                version: pkg.version
              })),
              tag: latestTag
            };

            fs.writeFileSync('./release.json', JSON.stringify(releaseData, null, 2));
            console.log('release.json file created with package versions.');

      - name: Commit and Push release.json
        if: ${{ success() }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add release.json
          git commit -m "chore: add release.json for ${GITHUB_SHA}"
          git push origin main
